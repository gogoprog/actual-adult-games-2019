// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var ash_ClassMap = function() {
	this.keyMap = new haxe_ds_StringMap();
	this.valueMap = new haxe_ds_StringMap();
};
ash_ClassMap.__name__ = ["ash","ClassMap"];
ash_ClassMap.__interfaces__ = [haxe_IMap];
ash_ClassMap.prototype = {
	get: function(k) {
		var _this = this.valueMap;
		var key = Type.getClassName(k);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,set: function(k,v) {
		var name = Type.getClassName(k);
		var _this = this.keyMap;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,k);
		} else {
			_this.h[name] = k;
		}
		var _this1 = this.valueMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,v);
		} else {
			_this1.h[name] = v;
		}
	}
	,exists: function(k) {
		var _this = this.valueMap;
		var key = Type.getClassName(k);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,remove: function(k) {
		var name = Type.getClassName(k);
		this.keyMap.remove(name);
		return this.valueMap.remove(name);
	}
	,keys: function() {
		var _this = this.keyMap;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,iterator: function() {
		var _this = this.valueMap;
		return new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	}
	,toString: function() {
		return this.valueMap.toString();
	}
	,__class__: ash_ClassMap
};
var ash_GenericListIterator = function(head) {
	this.current = head;
};
ash_GenericListIterator.__name__ = ["ash","GenericListIterator"];
ash_GenericListIterator.prototype = {
	hasNext: function() {
		return this.current != null;
	}
	,next: function() {
		var node = this.current;
		this.current = this.current.next;
		return node;
	}
	,__class__: ash_GenericListIterator
};
var ash_core_IFamily = function() { };
ash_core_IFamily.__name__ = ["ash","core","IFamily"];
ash_core_IFamily.prototype = {
	__class__: ash_core_IFamily
};
var ash_core_ComponentMatchingFamily = function(nodeClass,engine) {
	this.nodeClass = nodeClass;
	this.engine = engine;
	this.init();
};
ash_core_ComponentMatchingFamily.__name__ = ["ash","core","ComponentMatchingFamily"];
ash_core_ComponentMatchingFamily.__interfaces__ = [ash_core_IFamily];
ash_core_ComponentMatchingFamily.prototype = {
	init: function() {
		this.nodeList = new ash_core_NodeList();
		this.entities = new haxe_ds_ObjectMap();
		this.components = this.nodeClass._getComponents();
		this.nodePool = new ash_core_NodePool(this.nodeClass,this.components);
	}
	,newEntity: function(entity) {
		this.addIfMatch(entity);
	}
	,componentAddedToEntity: function(entity,componentClass) {
		this.addIfMatch(entity);
	}
	,componentRemovedFromEntity: function(entity,componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			this.removeIfMatch(entity);
		}
	}
	,removeEntity: function(entity) {
		this.removeIfMatch(entity);
	}
	,addIfMatch: function(entity) {
		if(this.entities.h.__keys__[entity.__id__] == null) {
			var _this = this.components.keyMap;
			var componentClass = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
			while(componentClass.hasNext()) {
				var componentClass1 = componentClass.next();
				if(!entity.has(componentClass1)) {
					return;
				}
			}
			var node = this.nodePool.get();
			node.entity = entity;
			var _this1 = this.components.keyMap;
			var componentClass2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(componentClass2.hasNext()) {
				var componentClass3 = componentClass2.next();
				var _this2 = this.components.valueMap;
				var key = Type.getClassName(componentClass3);
				node[__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]] = entity.get(componentClass3);
			}
			this.entities.set(entity,node);
			this.nodeList.add(node);
		}
	}
	,removeIfMatch: function(entity) {
		if(this.entities.h.__keys__[entity.__id__] != null) {
			var node = this.entities.h[entity.__id__];
			this.entities.remove(entity);
			this.nodeList.remove(node);
			if(this.engine.updating) {
				this.nodePool.cache(node);
				this.engine.updateComplete.add($bind(this,this.releaseNodePoolCache));
			} else {
				this.nodePool.dispose(node);
			}
		}
	}
	,releaseNodePoolCache: function() {
		this.engine.updateComplete.remove($bind(this,this.releaseNodePoolCache));
		this.nodePool.releaseCache();
	}
	,cleanUp: function() {
		var _g_current = this.nodeList.head;
		while(_g_current != null) {
			var node = _g_current;
			_g_current = _g_current.next;
			var node1 = node;
			this.entities.remove(node1.entity);
		}
		this.nodeList.removeAll();
	}
	,__class__: ash_core_ComponentMatchingFamily
};
var ash_core_Engine = function() {
	this.familyClass = ash_core_ComponentMatchingFamily;
	this.entityList = new ash_core_EntityList();
	this.entityNames = new haxe_ds_StringMap();
	this.systemList = new ash_core_SystemList();
	this.families = new ash_ClassMap();
	this.entityAdded = new ash_signals_Signal1();
	this.entityRemoved = new ash_signals_Signal1();
	this.updateComplete = new ash_signals_Signal0();
	this.updating = false;
};
ash_core_Engine.__name__ = ["ash","core","Engine"];
ash_core_Engine.prototype = {
	addEntity: function(entity) {
		var key = entity.name;
		var _this = this.entityNames;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("The entity name " + entity.name + " is already in use by another entity.");
		}
		this.entityList.add(entity);
		var key1 = entity.name;
		var _this1 = this.entityNames;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,entity);
		} else {
			_this1.h[key1] = entity;
		}
		entity.componentAdded.add($bind(this,this.componentAdded));
		entity.componentRemoved.add($bind(this,this.componentRemoved));
		entity.nameChanged.add($bind(this,this.entityNameChanged));
		var _this2 = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.newEntity(entity);
		}
		this.entityAdded.dispatch(entity);
	}
	,removeEntity: function(entity) {
		entity.componentAdded.remove($bind(this,this.componentAdded));
		entity.componentRemoved.remove($bind(this,this.componentRemoved));
		entity.nameChanged.remove($bind(this,this.entityNameChanged));
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.removeEntity(entity);
		}
		this.entityNames.remove(entity.name);
		this.entityList.remove(entity);
		this.entityRemoved.dispatch(entity);
	}
	,entityNameChanged: function(entity,oldName) {
		var _this = this.entityNames;
		if((__map_reserved[oldName] != null ? _this.getReserved(oldName) : _this.h[oldName]) == entity) {
			this.entityNames.remove(oldName);
			var key = entity.name;
			var _this1 = this.entityNames;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,entity);
			} else {
				_this1.h[key] = entity;
			}
		}
	}
	,getEntityByName: function(name) {
		var _this = this.entityNames;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,removeAllEntities: function() {
		while(this.entityList.head != null) this.removeEntity(this.entityList.head);
	}
	,get_entities: function() {
		return this.entityList;
	}
	,componentAdded: function(entity,componentClass) {
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.componentAddedToEntity(entity,componentClass);
		}
	}
	,componentRemoved: function(entity,componentClass) {
		var _this = this.families.valueMap;
		var family = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(family.hasNext()) {
			var family1 = family.next();
			family1.componentRemovedFromEntity(entity,componentClass);
		}
	}
	,getNodeList: function(nodeClass) {
		var _this = this.families.valueMap;
		var key = Type.getClassName(nodeClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.families.valueMap;
			var key1 = Type.getClassName(nodeClass);
			return (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).nodeList;
		}
		var family = Type.createInstance(this.familyClass,[nodeClass,this]);
		var _this2 = this.families;
		var name = Type.getClassName(nodeClass);
		var _this3 = _this2.keyMap;
		if(__map_reserved[name] != null) {
			_this3.setReserved(name,nodeClass);
		} else {
			_this3.h[name] = nodeClass;
		}
		var _this4 = _this2.valueMap;
		if(__map_reserved[name] != null) {
			_this4.setReserved(name,family);
		} else {
			_this4.h[name] = family;
		}
		var _g_current = this.entityList.head;
		while(_g_current != null) {
			var node = _g_current;
			_g_current = _g_current.next;
			var entity = node;
			family.newEntity(entity);
		}
		return family.nodeList;
	}
	,releaseNodeList: function(nodeClass) {
		var _this = this.families.valueMap;
		var key = Type.getClassName(nodeClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.families.valueMap;
			var key1 = Type.getClassName(nodeClass);
			(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).cleanUp();
			var _this2 = this.families;
			var name = Type.getClassName(nodeClass);
			_this2.keyMap.remove(name);
			_this2.valueMap.remove(name);
		}
	}
	,addSystem: function(system,priority) {
		system.priority = priority;
		system.addToEngine(this);
		this.systemList.add(system);
	}
	,getSystem: function(type) {
		return this.systemList.get(type);
	}
	,get_systems: function() {
		return this.systemList;
	}
	,removeSystem: function(system) {
		this.systemList.remove(system);
		system.removeFromEngine(this);
	}
	,removeAllSystems: function() {
		while(this.systemList.head != null) {
			var system = this.systemList.head;
			this.systemList.head = this.systemList.head.next;
			system.previous = null;
			system.next = null;
			system.removeFromEngine(this);
			this.removeSystem(this.systemList.head);
		}
		this.systemList.tail = null;
	}
	,update: function(time) {
		this.updating = true;
		var _g_current = this.systemList.head;
		while(_g_current != null) {
			var node = _g_current;
			_g_current = _g_current.next;
			var system = node;
			system.update(time);
		}
		this.updating = false;
		this.updateComplete.dispatch();
	}
	,__class__: ash_core_Engine
};
var ash_core_Entity = function(name) {
	if(name == null) {
		name = "";
	}
	this.componentAdded = new ash_signals_Signal2();
	this.componentRemoved = new ash_signals_Signal2();
	this.nameChanged = new ash_signals_Signal2();
	this.components = new ash_ClassMap();
	if(name != "") {
		if(this.name != name) {
			var previous = this.name;
			this.name = name;
			this.nameChanged.dispatch(this,previous);
		}
	} else {
		var value = "_entity" + ++ash_core_Entity.nameCount;
		if(this.name != value) {
			var previous1 = this.name;
			this.name = value;
			this.nameChanged.dispatch(this,previous1);
		}
	}
};
ash_core_Entity.__name__ = ["ash","core","Entity"];
ash_core_Entity.prototype = {
	set_name: function(value) {
		if(this.name != value) {
			var previous = this.name;
			this.name = value;
			this.nameChanged.dispatch(this,previous);
		}
		return value;
	}
	,add: function(component,componentClass) {
		if(componentClass == null) {
			if(component == null) {
				componentClass = null;
			} else {
				componentClass = js_Boot.getClass(component);
			}
		}
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			this.remove(componentClass);
		}
		var _this1 = this.components;
		var name = Type.getClassName(componentClass);
		var _this2 = _this1.keyMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,componentClass);
		} else {
			_this2.h[name] = componentClass;
		}
		var _this3 = _this1.valueMap;
		if(__map_reserved[name] != null) {
			_this3.setReserved(name,component);
		} else {
			_this3.h[name] = component;
		}
		this.componentAdded.dispatch(this,componentClass);
		return this;
	}
	,remove: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		var component = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(component != null) {
			var _this1 = this.components;
			var name = Type.getClassName(componentClass);
			_this1.keyMap.remove(name);
			_this1.valueMap.remove(name);
			this.componentRemoved.dispatch(this,componentClass);
			return component;
		}
		return null;
	}
	,get: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,getAll: function() {
		var componentArray = [];
		var _this = this.components.valueMap;
		var component = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(component.hasNext()) {
			var component1 = component.next();
			componentArray.push(component1);
		}
		return componentArray;
	}
	,has: function(componentClass) {
		var _this = this.components.valueMap;
		var key = Type.getClassName(componentClass);
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,__class__: ash_core_Entity
};
var ash_core_EntityList = function() {
};
ash_core_EntityList.__name__ = ["ash","core","EntityList"];
ash_core_EntityList.prototype = {
	add: function(entity) {
		if(this.head == null) {
			this.head = this.tail = entity;
			entity.next = entity.previous = null;
		} else {
			this.tail.next = entity;
			entity.previous = this.tail;
			entity.next = null;
			this.tail = entity;
		}
	}
	,remove: function(entity) {
		if(this.head == entity) {
			this.head = this.head.next;
		}
		if(this.tail == entity) {
			this.tail = this.tail.previous;
		}
		if(entity.previous != null) {
			entity.previous.next = entity.next;
		}
		if(entity.next != null) {
			entity.next.previous = entity.previous;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var entity = this.head;
			this.head = this.head.next;
			entity.previous = null;
			entity.next = null;
		}
		this.tail = null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,__class__: ash_core_EntityList
};
var ash_core_Node = function() { };
ash_core_Node.__name__ = ["ash","core","Node"];
ash_core_Node.prototype = {
	__class__: ash_core_Node
};
var ash_core_NodeList = function() {
	this.nodeAdded = new ash_signals_Signal1();
	this.nodeRemoved = new ash_signals_Signal1();
};
ash_core_NodeList.__name__ = ["ash","core","NodeList"];
ash_core_NodeList.prototype = {
	add: function(node) {
		if(this.head == null) {
			this.head = this.tail = node;
			node.next = node.previous = null;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			node.next = null;
			this.tail = node;
		}
		this.nodeAdded.dispatch(node);
	}
	,remove: function(node) {
		if(this.head == node) {
			this.head = this.head.next;
		}
		if(this.tail == node) {
			this.tail = this.tail.previous;
		}
		if(node.previous != null) {
			node.previous.next = node.next;
		}
		if(node.next != null) {
			node.next.previous = node.previous;
		}
		this.nodeRemoved.dispatch(node);
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			node.previous = null;
			node.next = null;
			this.nodeRemoved.dispatch(node);
		}
		this.tail = null;
	}
	,get_empty: function() {
		return this.head == null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,swap: function(node1,node2) {
		if(node1.previous == node2) {
			node1.previous = node2.previous;
			node2.previous = node1;
			node2.next = node1.next;
			node1.next = node2;
		} else if(node2.previous == node1) {
			node2.previous = node1.previous;
			node1.previous = node2;
			node1.next = node2.next;
			node2.next = node1;
		} else {
			var temp = node1.previous;
			node1.previous = node2.previous;
			node2.previous = temp;
			temp = node1.next;
			node1.next = node2.next;
			node2.next = temp;
		}
		if(this.head == node1) {
			this.head = node2;
		} else if(this.head == node2) {
			this.head = node1;
		}
		if(this.tail == node1) {
			this.tail = node2;
		} else if(this.tail == node2) {
			this.tail = node1;
		}
		if(node1.previous != null) {
			node1.previous.next = node1;
		}
		if(node2.previous != null) {
			node2.previous.next = node2;
		}
		if(node1.next != null) {
			node1.next.previous = node1;
		}
		if(node2.next != null) {
			node2.next.previous = node2;
		}
	}
	,insertionSort: function(sortFunction) {
		if(this.head == this.tail) {
			return;
		}
		var remains = this.head.next;
		var node = remains;
		while(node != null) {
			remains = node.next;
			var other = node.previous;
			while(other != null) {
				if(sortFunction(node,other) >= 0) {
					if(node != other.next) {
						if(this.tail == node) {
							this.tail = node.previous;
						}
						node.previous.next = node.next;
						if(node.next != null) {
							node.next.previous = node.previous;
						}
						node.next = other.next;
						node.previous = other;
						node.next.previous = node;
						other.next = node;
					}
					break;
				}
				other = other.previous;
			}
			if(other == null) {
				if(this.tail == node) {
					this.tail = node.previous;
				}
				node.previous.next = node.next;
				if(node.next != null) {
					node.next.previous = node.previous;
				}
				node.next = this.head;
				this.head.previous = node;
				node.previous = null;
				this.head = node;
			}
			node = remains;
		}
	}
	,mergeSort: function(sortFunction) {
		if(this.head == this.tail) {
			return;
		}
		var lists = [];
		var start = this.head;
		var end;
		while(start != null) {
			end = start;
			while(end.next != null && sortFunction(end,end.next) <= 0) end = end.next;
			var next = end.next;
			start.previous = end.next = null;
			lists.push(start);
			start = next;
		}
		while(lists.length > 1) lists.push(this.merge(lists.shift(),lists.shift(),sortFunction));
		this.tail = this.head = lists[0];
		while(this.tail.next != null) this.tail = this.tail.next;
	}
	,merge: function(head1,head2,sortFunction) {
		var node;
		var head;
		if(sortFunction(head1,head2) <= 0) {
			node = head1;
			head = node;
			head1 = head1.next;
		} else {
			node = head2;
			head = node;
			head2 = head2.next;
		}
		while(head1 != null && head2 != null) if(sortFunction(head1,head2) <= 0) {
			node.next = head1;
			head1.previous = node;
			node = head1;
			head1 = head1.next;
		} else {
			node.next = head2;
			head2.previous = node;
			node = head2;
			head2 = head2.next;
		}
		if(head1 != null) {
			node.next = head1;
			head1.previous = node;
		} else {
			node.next = head2;
			head2.previous = node;
		}
		return head;
	}
	,__class__: ash_core_NodeList
};
var ash_core_NodePool = function(nodeClass,components) {
	this.nodeClass = nodeClass;
	this.components = components;
};
ash_core_NodePool.__name__ = ["ash","core","NodePool"];
ash_core_NodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return Type.createEmptyInstance(this.nodeClass);
		}
	}
	,dispose: function(node) {
		var _this = this.components.valueMap;
		var componentName = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(componentName.hasNext()) {
			var componentName1 = componentName.next();
			node[componentName1] = null;
		}
		node.entity = null;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: ash_core_NodePool
};
var ash_core_System = function() {
	this.priority = 0;
};
ash_core_System.__name__ = ["ash","core","System"];
ash_core_System.prototype = {
	addToEngine: function(engine) {
	}
	,removeFromEngine: function(engine) {
	}
	,update: function(time) {
	}
	,__class__: ash_core_System
};
var ash_core_SystemList = function() {
};
ash_core_SystemList.__name__ = ["ash","core","SystemList"];
ash_core_SystemList.prototype = {
	add: function(system) {
		if(this.head == null) {
			this.head = this.tail = system;
			system.next = system.previous = null;
		} else {
			var node = this.tail;
			while(node != null) {
				if(node.priority <= system.priority) {
					break;
				}
				node = node.previous;
			}
			if(node == this.tail) {
				this.tail.next = system;
				system.previous = this.tail;
				system.next = null;
				this.tail = system;
			} else if(node == null) {
				system.next = this.head;
				system.previous = null;
				this.head.previous = system;
				this.head = system;
			} else {
				system.next = node.next;
				system.previous = node;
				node.next.previous = system;
				node.next = system;
			}
		}
	}
	,remove: function(system) {
		if(this.head == system) {
			this.head = this.head.next;
		}
		if(this.tail == system) {
			this.tail = this.tail.previous;
		}
		if(system.previous != null) {
			system.previous.next = system.next;
		}
		if(system.next != null) {
			system.next.previous = system.previous;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var system = this.head;
			this.head = this.head.next;
			system.previous = null;
			system.next = null;
		}
		this.tail = null;
	}
	,get: function(type) {
		var system = this.head;
		while(system != null) {
			if(js_Boot.__instanceof(system,type)) {
				return system;
			}
			system = system.next;
		}
		return null;
	}
	,iterator: function() {
		return new ash_GenericListIterator(this.head);
	}
	,__class__: ash_core_SystemList
};
var ash_fsm_ISystemProvider = function() { };
ash_fsm_ISystemProvider.__name__ = ["ash","fsm","ISystemProvider"];
ash_fsm_ISystemProvider.prototype = {
	__class__: ash_fsm_ISystemProvider
};
var ash_fsm_DynamicSystemProvider = function(method) {
	this.method = method;
};
ash_fsm_DynamicSystemProvider.__name__ = ["ash","fsm","DynamicSystemProvider"];
ash_fsm_DynamicSystemProvider.__interfaces__ = [ash_fsm_ISystemProvider];
ash_fsm_DynamicSystemProvider.prototype = {
	getSystem: function() {
		return this.method();
	}
	,get_identifier: function() {
		return this.method;
	}
	,get_priority: function() {
		return this.priority;
	}
	,set_priority: function(value) {
		return this.priority = value;
	}
	,__class__: ash_fsm_DynamicSystemProvider
};
var ash_fsm_EngineState = function() {
	this.providers = [];
};
ash_fsm_EngineState.__name__ = ["ash","fsm","EngineState"];
ash_fsm_EngineState.prototype = {
	addInstance: function(system) {
		return this.addProvider(new ash_fsm_SystemInstanceProvider(system));
	}
	,addSingleton: function(type) {
		return this.addProvider(new ash_fsm_SystemSingletonProvider(type));
	}
	,addMethod: function(method) {
		return this.addProvider(new ash_fsm_DynamicSystemProvider(method));
	}
	,addProvider: function(provider) {
		var mapping = new ash_fsm_StateSystemMapping(this,provider);
		this.providers.push(provider);
		return mapping;
	}
	,__class__: ash_fsm_EngineState
};
var ash_fsm_EngineStateMachine = function(engine) {
	this.engine = engine;
	this.states = new haxe_ds_StringMap();
};
ash_fsm_EngineStateMachine.__name__ = ["ash","fsm","EngineStateMachine"];
ash_fsm_EngineStateMachine.prototype = {
	hasState: function(name) {
		var _this = this.states;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,addState: function(name,state) {
		var _this = this.states;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,state);
		} else {
			_this.h[name] = state;
		}
		return this;
	}
	,createState: function(name) {
		var state = new ash_fsm_EngineState();
		var _this = this.states;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,state);
		} else {
			_this.h[name] = state;
		}
		return state;
	}
	,changeState: function(name) {
		var _this = this.states;
		var newState = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(newState == null) {
			throw new js__$Boot_HaxeError("Engine state " + name + " doesn't exist");
		}
		if(newState == this.currentState) {
			newState = null;
			return;
		}
		var toAdd = new haxe_ds_ObjectMap();
		var id;
		var _g = 0;
		var _g1 = newState.providers;
		while(_g < _g1.length) {
			var provider = _g1[_g];
			++_g;
			id = provider.get_identifier();
			toAdd.set(id,provider);
		}
		if(this.currentState != null) {
			var _g2 = 0;
			var _g11 = this.currentState.providers;
			while(_g2 < _g11.length) {
				var provider1 = _g11[_g2];
				++_g2;
				id = provider1.get_identifier();
				var other = toAdd.h[id.__id__];
				if(other != null) {
					toAdd.remove(id);
				} else {
					this.engine.removeSystem(provider1.getSystem());
				}
			}
		}
		var provider2 = toAdd.iterator();
		while(provider2.hasNext()) {
			var provider3 = provider2.next();
			this.engine.addSystem(provider3.getSystem(),provider3.priority);
		}
		this.currentState = newState;
	}
	,__class__: ash_fsm_EngineStateMachine
};
var ash_fsm_StateSystemMapping = function(creatingState,provider) {
	this.creatingState = creatingState;
	this.provider = provider;
};
ash_fsm_StateSystemMapping.__name__ = ["ash","fsm","StateSystemMapping"];
ash_fsm_StateSystemMapping.prototype = {
	withPriority: function(priority) {
		this.provider.set_priority(priority);
		return this;
	}
	,addInstance: function(system) {
		return this.creatingState.addProvider(new ash_fsm_SystemInstanceProvider(system));
	}
	,addSingleton: function(type) {
		return this.creatingState.addSingleton(type);
	}
	,addMethod: function(method) {
		return this.creatingState.addMethod(method);
	}
	,addProvider: function(provider) {
		return this.creatingState.addProvider(provider);
	}
	,__class__: ash_fsm_StateSystemMapping
};
var ash_fsm_SystemInstanceProvider = function(instance) {
	this.instance = instance;
};
ash_fsm_SystemInstanceProvider.__name__ = ["ash","fsm","SystemInstanceProvider"];
ash_fsm_SystemInstanceProvider.__interfaces__ = [ash_fsm_ISystemProvider];
ash_fsm_SystemInstanceProvider.prototype = {
	getSystem: function() {
		return this.instance;
	}
	,get_identifier: function() {
		return this.instance;
	}
	,get_priority: function() {
		return this.priority;
	}
	,set_priority: function(value) {
		return this.priority = value;
	}
	,__class__: ash_fsm_SystemInstanceProvider
};
var ash_fsm_SystemSingletonProvider = function(type) {
	this.componentType = type;
};
ash_fsm_SystemSingletonProvider.__name__ = ["ash","fsm","SystemSingletonProvider"];
ash_fsm_SystemSingletonProvider.__interfaces__ = [ash_fsm_ISystemProvider];
ash_fsm_SystemSingletonProvider.prototype = {
	getSystem: function() {
		if(this.instance == null) {
			this.instance = Type.createInstance(this.componentType,[]);
		}
		return this.instance;
	}
	,get_identifier: function() {
		return this.getSystem();
	}
	,get_priority: function() {
		return this.priority;
	}
	,set_priority: function(value) {
		return this.priority = value;
	}
	,__class__: ash_fsm_SystemSingletonProvider
};
var ash_signals_ListenerNode = function() {
};
ash_signals_ListenerNode.__name__ = ["ash","signals","ListenerNode"];
ash_signals_ListenerNode.prototype = {
	__class__: ash_signals_ListenerNode
};
var ash_signals_ListenerNodePool = function() {
};
ash_signals_ListenerNodePool.__name__ = ["ash","signals","ListenerNodePool"];
ash_signals_ListenerNodePool.prototype = {
	get: function() {
		if(this.tail != null) {
			var node = this.tail;
			this.tail = this.tail.previous;
			node.previous = null;
			return node;
		} else {
			return new ash_signals_ListenerNode();
		}
	}
	,dispose: function(node) {
		node.listener = null;
		node.once = false;
		node.next = null;
		node.previous = this.tail;
		this.tail = node;
	}
	,cache: function(node) {
		node.listener = null;
		node.previous = this.cacheTail;
		this.cacheTail = node;
	}
	,releaseCache: function() {
		while(this.cacheTail != null) {
			var node = this.cacheTail;
			this.cacheTail = node.previous;
			node.next = null;
			node.previous = this.tail;
			this.tail = node;
		}
	}
	,__class__: ash_signals_ListenerNodePool
};
var ash_signals_SignalBase = function() {
	this.listenerNodePool = new ash_signals_ListenerNodePool();
	this.numListeners = 0;
};
ash_signals_SignalBase.__name__ = ["ash","signals","SignalBase"];
ash_signals_SignalBase.prototype = {
	startDispatch: function() {
		this.dispatching = true;
	}
	,endDispatch: function() {
		this.dispatching = false;
		if(this.toAddHead != null) {
			if(this.head == null) {
				this.head = this.toAddHead;
				this.tail = this.toAddTail;
			} else {
				this.tail.next = this.toAddHead;
				this.toAddHead.previous = this.tail;
				this.tail = this.toAddTail;
			}
			this.toAddHead = null;
			this.toAddTail = null;
		}
		this.listenerNodePool.releaseCache();
	}
	,getNode: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node;
	}
	,nodeExists: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		return node != null;
	}
	,add: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		this.addNode(node1);
	}
	,addOnce: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		if(node != null) {
			return;
		}
		var node1 = this.listenerNodePool.get();
		node1.listener = listener;
		node1.once = true;
		this.addNode(node1);
	}
	,addNode: function(node) {
		if(this.dispatching) {
			if(this.toAddHead == null) {
				this.toAddHead = this.toAddTail = node;
			} else {
				this.toAddTail.next = node;
				node.previous = this.toAddTail;
				this.toAddTail = node;
			}
		} else if(this.head == null) {
			this.head = this.tail = node;
		} else {
			this.tail.next = node;
			node.previous = this.tail;
			this.tail = node;
		}
		this.numListeners++;
	}
	,remove: function(listener) {
		var node = this.head;
		while(node != null) {
			if(Reflect.compareMethods(node.listener,listener)) {
				break;
			}
			node = node.next;
		}
		if(node == null) {
			node = this.toAddHead;
			while(node != null) {
				if(Reflect.compareMethods(node.listener,listener)) {
					break;
				}
				node = node.next;
			}
		}
		var node1 = node;
		if(node1 != null) {
			if(this.head == node1) {
				this.head = this.head.next;
			}
			if(this.tail == node1) {
				this.tail = this.tail.previous;
			}
			if(this.toAddHead == node1) {
				this.toAddHead = this.toAddHead.next;
			}
			if(this.toAddTail == node1) {
				this.toAddTail = this.toAddTail.previous;
			}
			if(node1.previous != null) {
				node1.previous.next = node1.next;
			}
			if(node1.next != null) {
				node1.next.previous = node1.previous;
			}
			if(this.dispatching) {
				this.listenerNodePool.cache(node1);
			} else {
				this.listenerNodePool.dispose(node1);
			}
			this.numListeners--;
		}
	}
	,removeAll: function() {
		while(this.head != null) {
			var node = this.head;
			this.head = this.head.next;
			this.listenerNodePool.dispose(node);
		}
		this.tail = null;
		this.toAddHead = null;
		this.toAddTail = null;
		this.numListeners = 0;
	}
	,__class__: ash_signals_SignalBase
};
var ash_signals_Signal0 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal0.__name__ = ["ash","signals","Signal0"];
ash_signals_Signal0.__super__ = ash_signals_SignalBase;
ash_signals_Signal0.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function() {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener();
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal0
});
var ash_signals_Signal1 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal1.__name__ = ["ash","signals","Signal1"];
ash_signals_Signal1.__super__ = ash_signals_SignalBase;
ash_signals_Signal1.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function(object1) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal1
});
var ash_signals_Signal2 = function() {
	ash_signals_SignalBase.call(this);
};
ash_signals_Signal2.__name__ = ["ash","signals","Signal2"];
ash_signals_Signal2.__super__ = ash_signals_SignalBase;
ash_signals_Signal2.prototype = $extend(ash_signals_SignalBase.prototype,{
	dispatch: function(object1,object2) {
		this.startDispatch();
		var node = this.head;
		while(node != null) {
			node.listener(object1,object2);
			if(node.once) {
				this.remove(node.listener);
			}
			node = node.next;
		}
		this.endDispatch();
	}
	,__class__: ash_signals_Signal2
});
var ash_tools_ListIteratingSystem = function(nodeClass,nodeUpdateFunction,nodeAddedFunction,nodeRemovedFunction) {
	ash_core_System.call(this);
	this.nodeClass = nodeClass;
	this.nodeUpdateFunction = nodeUpdateFunction;
	this.nodeAddedFunction = nodeAddedFunction;
	this.nodeRemovedFunction = nodeRemovedFunction;
};
ash_tools_ListIteratingSystem.__name__ = ["ash","tools","ListIteratingSystem"];
ash_tools_ListIteratingSystem.__super__ = ash_core_System;
ash_tools_ListIteratingSystem.prototype = $extend(ash_core_System.prototype,{
	addToEngine: function(engine) {
		this.nodeList = engine.getNodeList(this.nodeClass);
		if(this.nodeAddedFunction != null) {
			var _g_current = this.nodeList.head;
			while(_g_current != null) {
				var node = _g_current;
				_g_current = _g_current.next;
				var node1 = node;
				this.nodeAddedFunction(node1);
			}
			this.nodeList.nodeAdded.add(this.nodeAddedFunction);
		}
		if(this.nodeRemovedFunction != null) {
			this.nodeList.nodeRemoved.add(this.nodeRemovedFunction);
		}
	}
	,removeFromEngine: function(engine) {
		if(this.nodeAddedFunction != null) {
			this.nodeList.nodeAdded.remove(this.nodeAddedFunction);
		}
		if(this.nodeRemovedFunction != null) {
			this.nodeList.nodeRemoved.remove(this.nodeRemovedFunction);
		}
		this.nodeList = null;
	}
	,update: function(time) {
		if(this.nodeUpdateFunction != null) {
			var _g_current = this.nodeList.head;
			while(_g_current != null) {
				var node = _g_current;
				_g_current = _g_current.next;
				var node1 = node;
				this.nodeUpdateFunction(node1,time);
			}
		}
	}
	,__class__: ash_tools_ListIteratingSystem
});
var game_AutoRemove = function(d) {
	this.time = 0.0;
	this.duration = d;
};
game_AutoRemove.__name__ = ["game","AutoRemove"];
game_AutoRemove.prototype = {
	__class__: game_AutoRemove
};
var game_AutoRemoveNode = function() { };
game_AutoRemoveNode.__name__ = ["game","AutoRemoveNode"];
game_AutoRemoveNode._getComponents = function() {
	if(game_AutoRemoveNode._components == null) {
		game_AutoRemoveNode._components = new ash_ClassMap();
		var _this = game_AutoRemoveNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = game_AutoRemoveNode._components;
		var k1 = game_AutoRemove;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"autoRemove");
		} else {
			_this5.h[name1] = "autoRemove";
		}
	}
	return game_AutoRemoveNode._components;
};
game_AutoRemoveNode.__super__ = ash_core_Node;
game_AutoRemoveNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: game_AutoRemoveNode
});
var game_AutoRemoveSystem = function() {
	ash_tools_ListIteratingSystem.call(this,game_AutoRemoveNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
};
game_AutoRemoveSystem.__name__ = ["game","AutoRemoveSystem"];
game_AutoRemoveSystem.__super__ = ash_tools_ListIteratingSystem;
game_AutoRemoveSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	addToEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.addToEngine.call(this,engine);
		this.engine = engine;
	}
	,removeFromEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.removeFromEngine.call(this,engine);
	}
	,updateNode: function(node,dt) {
		var autoRemove = node.autoRemove;
		autoRemove.time += dt;
		if(autoRemove.time >= autoRemove.duration) {
			this.engine.removeEntity(node.entity);
		}
	}
	,onNodeAdded: function(node) {
		node.autoRemove.time = 0;
	}
	,onNodeRemoved: function(node) {
	}
	,__class__: game_AutoRemoveSystem
});
var game_Config = function() { };
game_Config.__name__ = ["game","Config"];
var game_Coord = function(x,y) {
	this.x = x;
	this.y = y;
};
game_Coord.__name__ = ["game","Coord"];
game_Coord.prototype = {
	__class__: game_Coord
};
var game_Factory = function() { };
game_Factory.__name__ = ["game","Factory"];
game_Factory.preload = function(game1) {
	game1.load.image("car","../data/textures/car.png");
	game1.load.image("grass","../data/textures/grass.png");
	game1.load.image("grass-cut","../data/textures/grass-cut.png");
	game1.load.image("particle","../data/textures/particle.png");
};
game_Factory.init = function(game1) {
};
game_Factory.createTile = function(i,j) {
	var e = new ash_core_Entity();
	e.add(new whiplash_phaser_Sprite("grass"));
	e.add(new whiplash_phaser_Transform());
	e.add(new game_Tile(i,j));
	e.get(whiplash_phaser_Sprite).anchor.set(0.5,0.5);
	var s = game_Config.tileSize / 32;
	e.get(whiplash_phaser_Transform).scale.set(s,s);
	return e;
};
game_Factory.createMachine = function() {
	var e = new ash_core_Entity();
	e.add(new whiplash_phaser_Sprite("car"));
	e.add(new whiplash_phaser_Transform());
	e.add(new game_Machine());
	e.add(new game_Object());
	e.get(whiplash_phaser_Sprite).anchor.set(0.5,0.5);
	return e;
};
game_Factory.createGrassParticles = function() {
	var e = new ash_core_Entity();
	e.add(new whiplash_phaser_Transform());
	e.add(new game_AutoRemove(0.9));
	var emitter = new whiplash_phaser_Emitter(32);
	e.add(emitter);
	emitter.makeParticles("particle");
	var this1 = new Phaser.Point(0,0);
	emitter.gravity = this1;
	return e;
};
var whiplash_Application = function(width,height,parent,whiplash_options) {
	if(whiplash_options == null) {
		whiplash_options = 3;
	}
	if(parent == null) {
		parent = "body";
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	this.timeFactor = 1;
	var _gthis = this;
	$(window).on("load",null,function() {
		whiplash_Lib.init(width,height,parent,{ preload : $bind(_gthis,_gthis.preload), create : $bind(_gthis,_gthis.create), update : $bind(_gthis,_gthis.update)},whiplash_options);
		_gthis.uiEngine = new ash_core_Engine();
		_gthis.engine = whiplash_Lib.ashEngine;
		_gthis.game = whiplash_Lib.phaserGame;
		_gthis.esm = new ash_fsm_EngineStateMachine(_gthis.engine);
		_gthis.ingameEsm = new ash_fsm_EngineStateMachine(_gthis.engine);
		_gthis.uiEsm = new ash_fsm_EngineStateMachine(_gthis.uiEngine);
		_gthis.statePageMap = new haxe_ds_StringMap();
		_gthis.onGuiLoaded();
	});
};
whiplash_Application.__name__ = ["whiplash","Application"];
whiplash_Application.prototype = {
	preload: function() {
		whiplash_DataManager.preload(this.game);
	}
	,create: function() {
		whiplash_AudioManager.init(this.game);
	}
	,update: function() {
		var t = this.game.time.elapsed / 1000;
		t *= this.timeFactor;
		this.engine.update(t);
		this.uiEngine.update(t);
	}
	,createState: function(name) {
		var state = new ash_fsm_EngineState();
		this.esm.addState(name,state);
		return state;
	}
	,createIngameState: function(name) {
		var state = new ash_fsm_EngineState();
		this.ingameEsm.addState(name,state);
		return state;
	}
	,createUiState: function(name,page) {
		var state = new ash_fsm_EngineState();
		this.uiEsm.addState(name,state);
		if(page != null) {
			var _this = this.statePageMap;
			if(__map_reserved[name] != null) {
				_this.setReserved(name,page);
			} else {
				_this.h[name] = page;
			}
		}
		return state;
	}
	,onResize: function() {
	}
	,onGuiLoaded: function() {
		this.pages = js_uipages_Lib.createGroup($(".pages"));
		this.pages.showPage(".default");
		this.onResize();
	}
	,changeState: function(stateName) {
		var _gthis = this;
		this.engine.updateComplete.addOnce(function() {
			_gthis.esm.changeState(stateName);
		});
	}
	,changeIngameState: function(stateName) {
		var _gthis = this;
		this.engine.updateComplete.addOnce(function() {
			_gthis.ingameEsm.changeState(stateName);
		});
	}
	,changeUiState: function(stateName) {
		var _gthis = this;
		this.uiEngine.updateComplete.addOnce(function() {
			_gthis.uiEsm.changeState(stateName);
			var _this = _gthis.statePageMap;
			var pageName = __map_reserved[stateName] != null ? _this.getReserved(stateName) : _this.h[stateName];
			if(pageName != null) {
				_gthis.pages.showPage(pageName);
			}
		});
	}
	,delay: function(func,time_s) {
		haxe_Timer.delay(func,time_s * 1000 / this.timeFactor | 0);
	}
	,__class__: whiplash_Application
};
var game_Game = function() {
	whiplash_Application.call(this,game_Config.width,game_Config.height,".root");
	game_Game.instance = this;
};
game_Game.__name__ = ["game","Game"];
game_Game.main = function() {
	new game_Game();
};
game_Game.__super__ = whiplash_Application;
game_Game.prototype = $extend(whiplash_Application.prototype,{
	preload: function() {
		whiplash_Application.prototype.preload.call(this);
		game_Factory.preload(whiplash_Lib.phaserGame);
	}
	,create: function() {
		var game1 = whiplash_Lib.phaserGame;
		game1.stage.smoothed = false;
		game1.stage.disableVisibilityChange = true;
		whiplash_AudioManager.init(game1);
		game_Factory.init(game1);
		whiplash_Input.setup(window.document.querySelector(".hud"));
		this.createGrid(game_Config.cols,game_Config.rows);
		this.createMachine();
		this.engine.addSystem(new game_TileSystem(),1);
		this.engine.addSystem(new game_MoveSystem(),1);
		this.engine.addSystem(new game_MachineSystem(),2);
		this.engine.addSystem(new game_ObjectSystem(),3);
		this.engine.addSystem(new game_AutoRemoveSystem(),4);
	}
	,createGrid: function(w,h) {
		this.grid = [];
		this.cutGrid = [];
		var _g1 = 0;
		var _g = w;
		while(_g1 < _g) {
			var i = _g1++;
			this.grid[i] = [];
			this.cutGrid[i] = [];
			var _g3 = 0;
			var _g2 = h;
			while(_g3 < _g2) {
				var j = _g3++;
				var e = game_Factory.createTile(i,j);
				this.engine.addEntity(e);
				this.cutGrid[i][j] = false;
			}
		}
	}
	,createMachine: function() {
		var e = game_Factory.createMachine();
		var p = e.get(whiplash_phaser_Transform).position;
		this.engine.addEntity(e);
	}
	,__class__: game_Game
});
var game_Machine = function() {
	this.reachedPosition = new game_Coord(0,0);
	this.time = 0.0;
};
game_Machine.__name__ = ["game","Machine"];
game_Machine.prototype = {
	__class__: game_Machine
};
var game_MachineNode = function() { };
game_MachineNode.__name__ = ["game","MachineNode"];
game_MachineNode._getComponents = function() {
	if(game_MachineNode._components == null) {
		game_MachineNode._components = new ash_ClassMap();
		var _this = game_MachineNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = game_MachineNode._components;
		var k1 = game_Machine;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"machine");
		} else {
			_this5.h[name1] = "machine";
		}
		var _this6 = game_MachineNode._components;
		var k2 = game_Object;
		var name2 = Type.getClassName(k2);
		var _this7 = _this6.keyMap;
		if(__map_reserved[name2] != null) {
			_this7.setReserved(name2,k2);
		} else {
			_this7.h[name2] = k2;
		}
		var _this8 = _this6.valueMap;
		if(__map_reserved[name2] != null) {
			_this8.setReserved(name2,"object");
		} else {
			_this8.h[name2] = "object";
		}
	}
	return game_MachineNode._components;
};
game_MachineNode.__super__ = ash_core_Node;
game_MachineNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: game_MachineNode
});
var game_MachineSystem = function() {
	ash_tools_ListIteratingSystem.call(this,game_MachineNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
};
game_MachineSystem.__name__ = ["game","MachineSystem"];
game_MachineSystem.__super__ = ash_tools_ListIteratingSystem;
game_MachineSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	addToEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.addToEngine.call(this,engine);
		this.engine = engine;
	}
	,removeFromEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.removeFromEngine.call(this,engine);
	}
	,updateNode: function(node,dt) {
		var machine = node.machine;
		var transform = node.transform;
		var tpos = transform.position;
		var keys = whiplash_Input.keys;
		var dir = new game_Coord(0,0);
		var move = node.entity.get(game_Move);
		if(move == null) {
			var pos = machine.reachedPosition;
			pos.x = node.object.position.x | 0;
			pos.y = node.object.position.y | 0;
			var tileNode = game_Game.instance.grid[pos.x][pos.y];
			var isCut = game_Game.instance.cutGrid[pos.x][pos.y];
			if(!isCut) {
				tileNode.sprite.loadTexture("grass-cut");
				var e = game_Factory.createGrassParticles();
				e.get(whiplash_phaser_Transform).position.set(tpos.x,tpos.y);
				e.get(whiplash_phaser_Emitter).start(true,2000,null,10);
				this.engine.addEntity(e);
				game_Game.instance.cutGrid[pos.x][pos.y] = true;
			}
		}
		if(__map_reserved["ArrowRight"] != null ? keys.getReserved("ArrowRight") : keys.h["ArrowRight"]) {
			dir.x = 1;
			transform.rotation = 90;
		} else if(__map_reserved["ArrowLeft"] != null ? keys.getReserved("ArrowLeft") : keys.h["ArrowLeft"]) {
			dir.x = -1;
			transform.rotation = -90;
		} else if(__map_reserved["ArrowUp"] != null ? keys.getReserved("ArrowUp") : keys.h["ArrowUp"]) {
			dir.y = -1;
			transform.rotation = 0;
		} else if(__map_reserved["ArrowDown"] != null ? keys.getReserved("ArrowDown") : keys.h["ArrowDown"]) {
			dir.y = 1;
			transform.rotation = 180;
		}
		if(dir.x != 0 || dir.y != 0) {
			if(move == null) {
				var from = machine.reachedPosition;
				var to = new game_Coord(from.x + dir.x,from.y + dir.y);
				if(to.x >= 0 && to.x < game_Config.cols && to.y >= 0 && to.y < game_Config.rows) {
					move = new game_Move();
					move.from = from;
					move.to = to;
					node.entity.add(move);
				}
			}
		}
	}
	,onNodeAdded: function(node) {
	}
	,onNodeRemoved: function(node) {
	}
	,__class__: game_MachineSystem
});
var game_Move = function() {
	this.speed = 10;
	this.time = 0.0;
};
game_Move.__name__ = ["game","Move"];
game_Move.prototype = {
	__class__: game_Move
};
var game_MoveNode = function() { };
game_MoveNode.__name__ = ["game","MoveNode"];
game_MoveNode._getComponents = function() {
	if(game_MoveNode._components == null) {
		game_MoveNode._components = new ash_ClassMap();
		var _this = game_MoveNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = game_MoveNode._components;
		var k1 = game_Move;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"move");
		} else {
			_this5.h[name1] = "move";
		}
		var _this6 = game_MoveNode._components;
		var k2 = game_Object;
		var name2 = Type.getClassName(k2);
		var _this7 = _this6.keyMap;
		if(__map_reserved[name2] != null) {
			_this7.setReserved(name2,k2);
		} else {
			_this7.h[name2] = k2;
		}
		var _this8 = _this6.valueMap;
		if(__map_reserved[name2] != null) {
			_this8.setReserved(name2,"object");
		} else {
			_this8.h[name2] = "object";
		}
	}
	return game_MoveNode._components;
};
game_MoveNode.__super__ = ash_core_Node;
game_MoveNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: game_MoveNode
});
var game_MoveSystem = function() {
	ash_tools_ListIteratingSystem.call(this,game_MoveNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
};
game_MoveSystem.__name__ = ["game","MoveSystem"];
game_MoveSystem.__super__ = ash_tools_ListIteratingSystem;
game_MoveSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	addToEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.addToEngine.call(this,engine);
		this.engine = engine;
	}
	,removeFromEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.removeFromEngine.call(this,engine);
	}
	,updateNode: function(node,dt) {
		var move = node.move;
		move.time += dt;
		this.apply(node);
	}
	,onNodeAdded: function(node) {
		node.move.time = node.object.nextMoveTime;
		this.apply(node);
	}
	,onNodeRemoved: function(node) {
	}
	,apply: function(node) {
		var move = node.move;
		var object = node.object;
		var duration = 1 / move.speed;
		var p = object.position;
		var from = move.from;
		var to = move.to;
		var f = move.time / duration;
		if(f > 1) {
			object.nextMoveTime = move.time - duration;
			f = 1;
		}
		object.position.x = move.from.x + (move.to.x - move.from.x) * f;
		object.position.y = move.from.y + (move.to.y - move.from.y) * f;
		if(f == 1) {
			node.entity.remove(game_Move);
		}
	}
	,__class__: game_MoveSystem
});
var game_Object = function() {
	this.nextMoveTime = 0;
	var this1 = new Phaser.Point(0,0);
	this.position = this1;
	this.time = 0.0;
};
game_Object.__name__ = ["game","Object"];
game_Object.prototype = {
	__class__: game_Object
};
var game_ObjectNode = function() { };
game_ObjectNode.__name__ = ["game","ObjectNode"];
game_ObjectNode._getComponents = function() {
	if(game_ObjectNode._components == null) {
		game_ObjectNode._components = new ash_ClassMap();
		var _this = game_ObjectNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = game_ObjectNode._components;
		var k1 = game_Object;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"object");
		} else {
			_this5.h[name1] = "object";
		}
	}
	return game_ObjectNode._components;
};
game_ObjectNode.__super__ = ash_core_Node;
game_ObjectNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: game_ObjectNode
});
var game_ObjectSystem = function() {
	ash_tools_ListIteratingSystem.call(this,game_ObjectNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
};
game_ObjectSystem.__name__ = ["game","ObjectSystem"];
game_ObjectSystem.__super__ = ash_tools_ListIteratingSystem;
game_ObjectSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	addToEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.addToEngine.call(this,engine);
		this.engine = engine;
	}
	,removeFromEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.removeFromEngine.call(this,engine);
	}
	,updateNode: function(node,dt) {
		var tpos = node.transform.position;
		var opos = node.object.position;
		tpos.x = game_Config.tileSize / 2 + opos.x * game_Config.tileSize;
		tpos.y = game_Config.tileSize / 2 + opos.y * game_Config.tileSize;
		node.object.nextMoveTime = 0;
	}
	,onNodeAdded: function(node) {
	}
	,onNodeRemoved: function(node) {
	}
	,__class__: game_ObjectSystem
});
var game_Tile = function(c,r) {
	this.col = c;
	this.row = r;
};
game_Tile.__name__ = ["game","Tile"];
game_Tile.prototype = {
	__class__: game_Tile
};
var game_TileNode = function() { };
game_TileNode.__name__ = ["game","TileNode"];
game_TileNode._getComponents = function() {
	if(game_TileNode._components == null) {
		game_TileNode._components = new ash_ClassMap();
		var _this = game_TileNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = game_TileNode._components;
		var k1 = game_Tile;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"tile");
		} else {
			_this5.h[name1] = "tile";
		}
		var _this6 = game_TileNode._components;
		var k2 = whiplash_phaser_Sprite;
		var name2 = Type.getClassName(k2);
		var _this7 = _this6.keyMap;
		if(__map_reserved[name2] != null) {
			_this7.setReserved(name2,k2);
		} else {
			_this7.h[name2] = k2;
		}
		var _this8 = _this6.valueMap;
		if(__map_reserved[name2] != null) {
			_this8.setReserved(name2,"sprite");
		} else {
			_this8.h[name2] = "sprite";
		}
	}
	return game_TileNode._components;
};
game_TileNode.__super__ = ash_core_Node;
game_TileNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: game_TileNode
});
var game_TileSystem = function() {
	ash_tools_ListIteratingSystem.call(this,game_TileNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
};
game_TileSystem.__name__ = ["game","TileSystem"];
game_TileSystem.__super__ = ash_tools_ListIteratingSystem;
game_TileSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	addToEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.addToEngine.call(this,engine);
		this.engine = engine;
	}
	,removeFromEngine: function(engine) {
		ash_tools_ListIteratingSystem.prototype.removeFromEngine.call(this,engine);
	}
	,updateNode: function(node,dt) {
	}
	,onNodeAdded: function(node) {
		var p = node.transform.position;
		var tile = node.tile;
		p.x = game_Config.tileSize / 2 + tile.col * game_Config.tileSize;
		p.y = game_Config.tileSize / 2 + tile.row * game_Config.tileSize;
		game_Game.instance.grid[tile.col][tile.row] = node;
	}
	,onNodeRemoved: function(node) {
	}
	,__class__: game_TileSystem
});
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_uipages_Group = function(parent,showOptions,hideOptions) {
	this.currentPageIndex = 0;
	this.parent = parent;
	this.showOptions = showOptions;
	this.hideOptions = hideOptions;
};
js_uipages_Group.__name__ = ["js","uipages","Group"];
js_uipages_Group.prototype = {
	showPage: function(selector) {
		var _gthis = this;
		var page;
		if(typeof(selector) == "number" && ((selector | 0) === selector)) {
			page = $(this.parent.children()[selector]);
		} else if(typeof(selector) == "string") {
			page = this.parent.find(selector);
		} else {
			page = selector;
		}
		this.parent.children().each(function(index,element) {
			var that = $(this);
			if(that[0] != page[0]) {
				that.hide(_gthis.hideOptions);
			} else {
				that.show(_gthis.showOptions);
				_gthis.currentPage = that;
				_gthis.currentPageId = that.attr("id");
				_gthis.currentPageIndex = that.index();
			}
		});
	}
	,nextPage: function() {
		var index = this.currentPageIndex + 1;
		var len = this.parent.children().length;
		if(index >= len) {
			index -= len;
		}
		this.showPage(index);
	}
	,previousPage: function() {
		var index = this.currentPageIndex - 1;
		if(index < 0) {
			index += this.parent.children().length;
		}
		this.showPage(index);
	}
	,__class__: js_uipages_Group
};
var js_uipages_Lib = function() { };
js_uipages_Lib.__name__ = ["js","uipages","Lib"];
js_uipages_Lib.main = function() {
	window.jQuery.prototype["uiPages"] = js_uipages_Lib.uiPages;
};
js_uipages_Lib.uiPages = function(parameter1,parameter2) {
	var that = this;
	if(parameter1 == null || parameter1 != null && parameter2 != null) {
		js_uipages_Lib.createGroup(that,parameter1,parameter2);
	} else if(parameter1 == "next") {
		js_uipages_Lib.instances.h[that.__id__].nextPage();
	} else if(parameter1 == "previous") {
		js_uipages_Lib.instances.h[that.__id__].previousPage();
	} else if(parameter1 != null) {
		js_uipages_Lib.instances.h[that.__id__].showPage(parameter1);
	}
	return that;
};
js_uipages_Lib.createGroup = function(parent,showOptions,hideOptions) {
	var instance = new js_uipages_Group(parent,showOptions,hideOptions);
	js_uipages_Lib.instances.set(parent,instance);
	return instance;
};
var whiplash_AudioManager = function() { };
whiplash_AudioManager.__name__ = ["whiplash","AudioManager"];
whiplash_AudioManager.init = function(game) {
	if(game != null) {
		var _g = 0;
		var _g1 = whiplash_DataManager.soundFiles;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var name = new haxe_io_Path(file).file;
			var this1 = whiplash_AudioManager.sounds;
			var v = game.add.audio(name);
			var _this = this1;
			var value = v;
			if(__map_reserved[name] != null) {
				_this.setReserved(name,value);
			} else {
				_this.h[name] = value;
			}
		}
	}
};
whiplash_AudioManager.playSound = function(name) {
	var _this = whiplash_AudioManager.sounds;
	if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
		console.log("Unknown sound: " + name);
		return;
	}
	if(whiplash_AudioManager.soundIsEnabled) {
		var _this1 = whiplash_AudioManager.sounds;
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).play();
	}
};
whiplash_AudioManager.stopSound = function(name) {
	var _this = whiplash_AudioManager.sounds;
	if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
		console.log("Unknown sound: " + name);
		return;
	}
	var _this1 = whiplash_AudioManager.sounds;
	(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).stop();
};
whiplash_AudioManager.playMusic = function(name) {
	var _this = whiplash_AudioManager.sounds;
	if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == whiplash_AudioManager.music) {
		return;
	}
	if(whiplash_AudioManager.music != null) {
		whiplash_AudioManager.music.stop();
	}
	if(whiplash_AudioManager.musicIsEnabled) {
		var _this1 = whiplash_AudioManager.sounds;
		whiplash_AudioManager.music = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
		whiplash_AudioManager.music.play("",0,1,true);
	}
};
whiplash_AudioManager.stopMusic = function() {
	if(whiplash_AudioManager.music != null) {
		whiplash_AudioManager.music.stop();
		whiplash_AudioManager.music = null;
	}
};
whiplash_AudioManager.enableSound = function(enabled) {
	if(enabled) {
		var _this = whiplash_AudioManager.sounds;
		var sound = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(sound.hasNext()) {
			var sound1 = sound.next();
			if(sound1 != whiplash_AudioManager.music) {
				sound1.stop();
			}
		}
	}
	whiplash_AudioManager.soundIsEnabled = enabled;
};
whiplash_AudioManager.enableMusic = function(enabled) {
	if(!enabled) {
		if(whiplash_AudioManager.music != null) {
			whiplash_AudioManager.music.stop();
		}
	} else if(whiplash_AudioManager.music != null) {
		whiplash_AudioManager.music.play("",0,1,true);
	}
	whiplash_AudioManager.musicIsEnabled = enabled;
};
var whiplash_DataManager = function() { };
whiplash_DataManager.__name__ = ["whiplash","DataManager"];
whiplash_DataManager.preload = function(game) {
	if(game != null) {
		var _g = 0;
		var _g1 = whiplash_DataManager.textureFiles;
		while(_g < _g1.length) {
			var file = _g1[_g];
			++_g;
			var name = new haxe_io_Path(file).file;
			game.load.image(name,file);
		}
		var _g2 = 0;
		var _g11 = whiplash_DataManager.soundFiles;
		while(_g2 < _g11.length) {
			var file1 = _g11[_g2];
			++_g2;
			var name1 = new haxe_io_Path(file1).file;
			game.load.audio(name1,file1);
		}
		var _g3 = 0;
		var _g12 = whiplash_DataManager.tilemapFiles;
		while(_g3 < _g12.length) {
			var file2 = _g12[_g3];
			++_g3;
			var name2 = new haxe_io_Path(file2).file;
			game.load.tilemap(name2,file2,null,Phaser.Tilemap.TILED_JSON);
		}
		var _g4 = 0;
		var _g13 = whiplash_DataManager.atlasFiles;
		while(_g4 < _g13.length) {
			var file3 = _g13[_g4];
			++_g4;
			var path = new haxe_io_Path(file3);
			if(path.ext == "json") {
				var name3 = path.file;
				game.load.atlas(name3,haxe_io_Path.withExtension(file3,"png"),file3);
			}
		}
	}
};
whiplash_DataManager.preloadFont = function(fontFamily) {
	var font = new FontFaceObserver(fontFamily);
	font.load().then(function() {
		console.log("Font-family loaded: " + fontFamily);
	});
};
var whiplash_Axis = { __ename__ : true, __constructs__ : ["X","Y","Z","W"] };
whiplash_Axis.X = ["X",0];
whiplash_Axis.X.__enum__ = whiplash_Axis;
whiplash_Axis.Y = ["Y",1];
whiplash_Axis.Y.__enum__ = whiplash_Axis;
whiplash_Axis.Z = ["Z",2];
whiplash_Axis.Z.__enum__ = whiplash_Axis;
whiplash_Axis.W = ["W",3];
whiplash_Axis.W.__enum__ = whiplash_Axis;
var whiplash_GamepadButton = { __ename__ : true, __constructs__ : ["Face1","Face2","Face3","Face4","LeftShoulder","RightShoulder","LeftShoulderBottom","RightShoulderBottom","Select","Start","LeftAnalogueStick","RightAnalogueStick","PadTop","PadBottom","PadLeft","PadRight"] };
whiplash_GamepadButton.Face1 = ["Face1",0];
whiplash_GamepadButton.Face1.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.Face2 = ["Face2",1];
whiplash_GamepadButton.Face2.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.Face3 = ["Face3",2];
whiplash_GamepadButton.Face3.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.Face4 = ["Face4",3];
whiplash_GamepadButton.Face4.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.LeftShoulder = ["LeftShoulder",4];
whiplash_GamepadButton.LeftShoulder.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.RightShoulder = ["RightShoulder",5];
whiplash_GamepadButton.RightShoulder.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.LeftShoulderBottom = ["LeftShoulderBottom",6];
whiplash_GamepadButton.LeftShoulderBottom.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.RightShoulderBottom = ["RightShoulderBottom",7];
whiplash_GamepadButton.RightShoulderBottom.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.Select = ["Select",8];
whiplash_GamepadButton.Select.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.Start = ["Start",9];
whiplash_GamepadButton.Start.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.LeftAnalogueStick = ["LeftAnalogueStick",10];
whiplash_GamepadButton.LeftAnalogueStick.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.RightAnalogueStick = ["RightAnalogueStick",11];
whiplash_GamepadButton.RightAnalogueStick.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.PadTop = ["PadTop",12];
whiplash_GamepadButton.PadTop.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.PadBottom = ["PadBottom",13];
whiplash_GamepadButton.PadBottom.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.PadLeft = ["PadLeft",14];
whiplash_GamepadButton.PadLeft.__enum__ = whiplash_GamepadButton;
whiplash_GamepadButton.PadRight = ["PadRight",15];
whiplash_GamepadButton.PadRight.__enum__ = whiplash_GamepadButton;
var whiplash_Input = function() { };
whiplash_Input.__name__ = ["whiplash","Input"];
whiplash_Input.resetMouseWheelDelta = function() {
	whiplash_Input.mouseWheelDelta = 0;
};
whiplash_Input.postUpdate = function() {
	whiplash_Input.justPressedKeys = new haxe_ds_StringMap();
};
whiplash_Input.update = function() {
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null) {
			whiplash_Input.previousGamepadAxes[i] = g.axes;
			var previousButtons = whiplash_Input.previousGamepadButtons[i];
			var _g3 = 0;
			var _g2 = g.buttons.length;
			while(_g3 < _g2) {
				var b = _g3++;
				previousButtons[b] = g.buttons[b].pressed;
			}
		}
	}
	whiplash_Input.gamepadStates = window.navigator.getGamepads();
};
whiplash_Input.isKeyJustPressed = function(name) {
	var _this = whiplash_Input.justPressedKeys;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
whiplash_Input.hasJustAxisValue = function(axe,value) {
	var a = axe[1];
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null) {
			if(value > 0) {
				if(g.axes[a] >= value && whiplash_Input.previousGamepadAxes[i][a] < value) {
					return true;
				}
			} else if(value < 0) {
				if(g.axes[a] <= value && whiplash_Input.previousGamepadAxes[i][a] > value) {
					return true;
				}
			} else if(g.axes[a] == value && whiplash_Input.previousGamepadAxes[i][a] != value) {
				return true;
			}
		}
	}
	return false;
};
whiplash_Input.getAxes = function() {
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null) {
			return g.axes;
		}
	}
	return whiplash_Input.nullAxes;
};
whiplash_Input.getXYAxes = function() {
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null) {
			var axes = g.axes;
			whiplash_Input.xyAxes.set(axes[0],axes[1]);
			return whiplash_Input.xyAxes;
		}
	}
	whiplash_Input.xyAxes.set(0,0);
	return whiplash_Input.xyAxes;
};
whiplash_Input.getZWAxes = function() {
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null) {
			var axes = g.axes;
			whiplash_Input.zwAxes.set(axes[2],axes[3]);
			return whiplash_Input.zwAxes;
		}
	}
	whiplash_Input.zwAxes.set(0,0);
	return whiplash_Input.zwAxes;
};
whiplash_Input.isButtonJustPressed = function(button) {
	var b = button[1];
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null && g.buttons[b].pressed && !whiplash_Input.previousGamepadButtons[i][b]) {
			return true;
		}
	}
	return false;
};
whiplash_Input.isButtonPressed = function(button) {
	var b = button[1];
	var _g1 = 0;
	var _g = whiplash_Input.gamepadStates.length;
	while(_g1 < _g) {
		var i = _g1++;
		var g = whiplash_Input.gamepadStates[i];
		if(g != null && g.buttons[b].pressed) {
			return true;
		}
	}
	return false;
};
whiplash_Input.setup = function(element) {
	element.addEventListener("mousedown",function(e) {
		whiplash_Input.mouseButtons.h[e.button] = true;
		whiplash_Input.mouseCoordinates.x = e.offsetX;
		whiplash_Input.mouseCoordinates.y = e.offsetY;
	});
	element.addEventListener("touchstart",function(e1) {
		whiplash_Input.mouseButtons.h[0] = true;
		whiplash_Input.mouseCoordinates.x = e1.touches[0].clientX;
		whiplash_Input.mouseCoordinates.y = e1.touches[0].clientY;
	});
	element.addEventListener("touchmove",function(e2) {
		whiplash_Input.mouseCoordinates.x = e2.touches[0].clientX;
		whiplash_Input.mouseCoordinates.y = e2.touches[0].clientY;
	});
	element.addEventListener("touchend",function(e3) {
		whiplash_Input.mouseButtons.h[0] = false;
		var touches = e3.changedTouches;
		if(touches == null) {
			touches = e3.touches;
		}
		if(touches.length > 0) {
			whiplash_Input.mouseCoordinates.x = touches[0].clientX;
			whiplash_Input.mouseCoordinates.y = touches[0].clientY;
		}
	});
	element.addEventListener("mousemove",function(e4) {
		whiplash_Input.mouseCoordinates.x = e4.offsetX;
		whiplash_Input.mouseCoordinates.y = e4.offsetY;
	});
	element.addEventListener("mouseup",function(e5) {
		whiplash_Input.mouseButtons.h[e5.button] = false;
		whiplash_Input.mouseCoordinates.x = e5.offsetX;
		whiplash_Input.mouseCoordinates.y = e5.offsetY;
	});
	element.addEventListener("wheel",function(e6) {
		whiplash_Input.mouseWheelDelta = e6.deltaY;
	});
	window.addEventListener("keydown",function(e7) {
		var k = e7.key;
		var _this = whiplash_Input.keys;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,true);
		} else {
			_this.h[k] = true;
		}
		var k1 = e7.key;
		var _this1 = whiplash_Input.justPressedKeys;
		if(__map_reserved[k1] != null) {
			_this1.setReserved(k1,true);
		} else {
			_this1.h[k1] = true;
		}
	});
	window.addEventListener("keyup",function(e8) {
		var k2 = e8.key;
		var _this2 = whiplash_Input.keys;
		if(__map_reserved[k2] != null) {
			_this2.setReserved(k2,false);
		} else {
			_this2.h[k2] = false;
		}
	});
};
var whiplash_Lib = function() { };
whiplash_Lib.__name__ = ["whiplash","Lib"];
whiplash_Lib.init = function(width,height,parent,callbacks,options,systemsPriority) {
	if(systemsPriority == null) {
		systemsPriority = 10;
	}
	if(options == null) {
		options = 3;
	}
	if(parent == null) {
		parent = "body";
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	var parentElement = window.document.querySelector(parent);
	whiplash_Lib.ashEngine = new ash_core_Engine();
	whiplash_Lib.phaserGame = new Phaser.Game(width,height,Phaser.CANVAS,parentElement,{ preload : callbacks.preload, create : callbacks.create, update : callbacks.update, render : callbacks.render});
	whiplash_Lib.phaserGame.transparent = true;
	whiplash_Lib.getDeltaTime = function() {
		return whiplash_Lib.phaserGame.time.elapsed;
	};
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_GroupSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_SpriteSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_TileSpriteSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_TilemapLayerSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_TextSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_BitmapTextSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_GraphicsSystem(whiplash_Lib.phaserGame),systemsPriority);
	whiplash_Lib.ashEngine.addSystem(new whiplash_phaser_EmitterSystem(whiplash_Lib.phaserGame),systemsPriority);
};
var whiplash_Macro = function() { };
whiplash_Macro.__name__ = ["whiplash","Macro"];
var whiplash_common_components_Active = function() {
};
whiplash_common_components_Active.__name__ = ["whiplash","common","components","Active"];
whiplash_common_components_Active.prototype = {
	__class__: whiplash_common_components_Active
};
var whiplash_math__$Point_Point_$Impl_$ = {};
whiplash_math__$Point_Point_$Impl_$.__name__ = ["whiplash","math","_Point","Point_Impl_"];
whiplash_math__$Point_Point_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	var this1 = new Phaser.Point(x,y);
	return this1;
};
whiplash_math__$Point_Point_$Impl_$.mul = function(a,b) {
	var this1 = new Phaser.Point(a.x * b,a.y * b);
	return this1;
};
whiplash_math__$Point_Point_$Impl_$.div = function(a,b) {
	var this1 = new Phaser.Point(a.x / b,a.y / b);
	return this1;
};
whiplash_math__$Point_Point_$Impl_$.add = function(a,b) {
	var this1 = new Phaser.Point(a.x + b.x,a.y + b.y);
	return this1;
};
whiplash_math__$Point_Point_$Impl_$.min = function(a,b) {
	var this1 = new Phaser.Point(a.x - b.x,a.y - b.y);
	return this1;
};
whiplash_math__$Point_Point_$Impl_$.getDistance = function(this1,other) {
	var this2 = new Phaser.Point(this1.x - other.x,this1.y - other.y);
	var delta = this2;
	return Math.sqrt(delta.x * delta.x + delta.y * delta.y);
};
whiplash_math__$Point_Point_$Impl_$.getAngle = function(this1) {
	return Math.atan2(this1.y,this1.x);
};
whiplash_math__$Point_Point_$Impl_$.getLength = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
var whiplash_math__$Vector2_Vector2_$Impl_$ = {};
whiplash_math__$Vector2_Vector2_$Impl_$.__name__ = ["whiplash","math","_Vector2","Vector2_Impl_"];
whiplash_math__$Vector2_Vector2_$Impl_$._new = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	var this1 = new Phaser.Point(x,y);
	return this1;
};
whiplash_math__$Vector2_Vector2_$Impl_$.mul = function(a,b) {
	var this1 = new Phaser.Point(a.x * b,a.y * b);
	return this1;
};
whiplash_math__$Vector2_Vector2_$Impl_$.div = function(a,b) {
	var this1 = new Phaser.Point(a.x / b,a.y / b);
	return this1;
};
whiplash_math__$Vector2_Vector2_$Impl_$.add = function(a,b) {
	var this1 = new Phaser.Point(a.x + b.x,a.y + b.y);
	return this1;
};
whiplash_math__$Vector2_Vector2_$Impl_$.min = function(a,b) {
	var this1 = new Phaser.Point(a.x - b.x,a.y - b.y);
	return this1;
};
whiplash_math__$Vector2_Vector2_$Impl_$.getDistance = function(this1,other) {
	var this2 = new Phaser.Point(this1.x - other.x,this1.y - other.y);
	var delta = this2;
	return Math.sqrt(delta.x * delta.x + delta.y * delta.y);
};
whiplash_math__$Vector2_Vector2_$Impl_$.getAngle = function(this1) {
	return Math.atan2(this1.y,this1.x);
};
whiplash_math__$Vector2_Vector2_$Impl_$.getLength = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
var whiplash_phaser_BitmapText = function(font,text,size) {
	Phaser.BitmapText.call(this,whiplash_Lib.phaserGame,0,0,font,text,size);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_BitmapText.__name__ = ["whiplash","phaser","BitmapText"];
whiplash_phaser_BitmapText.__super__ = Phaser.BitmapText;
whiplash_phaser_BitmapText.prototype = $extend(Phaser.BitmapText.prototype,{
	__class__: whiplash_phaser_BitmapText
});
var whiplash_phaser_BitmapTextNode = function() { };
whiplash_phaser_BitmapTextNode.__name__ = ["whiplash","phaser","BitmapTextNode"];
whiplash_phaser_BitmapTextNode._getComponents = function() {
	if(whiplash_phaser_BitmapTextNode._components == null) {
		whiplash_phaser_BitmapTextNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_BitmapTextNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_BitmapTextNode._components;
		var k1 = whiplash_phaser_BitmapText;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
	}
	return whiplash_phaser_BitmapTextNode._components;
};
whiplash_phaser_BitmapTextNode.__super__ = ash_core_Node;
whiplash_phaser_BitmapTextNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_BitmapTextNode
});
var whiplash_phaser_BitmapTextSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_BitmapTextNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_BitmapTextSystem.__name__ = ["whiplash","phaser","BitmapTextSystem"];
whiplash_phaser_BitmapTextSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_BitmapTextSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
		node.sprite.revive();
	}
	,onNodeRemoved: function(node) {
		node.sprite.kill();
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
	}
	,__class__: whiplash_phaser_BitmapTextSystem
});
var whiplash_phaser_Emitter = function(maxParticles) {
	Phaser.Particles.Arcade.Emitter.call(this,whiplash_Lib.phaserGame,0,0,maxParticles);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_Emitter.__name__ = ["whiplash","phaser","Emitter"];
whiplash_phaser_Emitter.__super__ = Phaser.Particles.Arcade.Emitter;
whiplash_phaser_Emitter.prototype = $extend(Phaser.Particles.Arcade.Emitter.prototype,{
	__class__: whiplash_phaser_Emitter
});
var whiplash_phaser_EmitterNode = function() { };
whiplash_phaser_EmitterNode.__name__ = ["whiplash","phaser","EmitterNode"];
whiplash_phaser_EmitterNode._getComponents = function() {
	if(whiplash_phaser_EmitterNode._components == null) {
		whiplash_phaser_EmitterNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_EmitterNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_EmitterNode._components;
		var k1 = whiplash_phaser_Emitter;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"emitter");
		} else {
			_this5.h[name1] = "emitter";
		}
	}
	return whiplash_phaser_EmitterNode._components;
};
whiplash_phaser_EmitterNode.__super__ = ash_core_Node;
whiplash_phaser_EmitterNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_EmitterNode
});
var whiplash_phaser_EmitterSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_EmitterNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_EmitterSystem.__name__ = ["whiplash","phaser","EmitterSystem"];
whiplash_phaser_EmitterSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_EmitterSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var emitter = node.emitter;
		emitter.position.x = position.x;
		emitter.position.y = position.y;
		emitter.scale.x = scale.x;
		emitter.scale.y = scale.y;
		emitter.angle = transform.rotation;
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var emitter = node.emitter;
		emitter.position.x = position.x;
		emitter.position.y = position.y;
		emitter.scale.x = scale.x;
		emitter.scale.y = scale.y;
		emitter.angle = transform.rotation;
		node.emitter.revive();
	}
	,onNodeRemoved: function(node) {
		node.emitter.destroy();
		node.emitter.kill();
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var emitter = node.emitter;
		emitter.position.x = position.x;
		emitter.position.y = position.y;
		emitter.scale.x = scale.x;
		emitter.scale.y = scale.y;
		emitter.angle = transform.rotation;
	}
	,__class__: whiplash_phaser_EmitterSystem
});
var whiplash_phaser_Graphics = function() {
	Phaser.Graphics.call(this,whiplash_Lib.phaserGame,0,0);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_Graphics.__name__ = ["whiplash","phaser","Graphics"];
whiplash_phaser_Graphics.__super__ = Phaser.Graphics;
whiplash_phaser_Graphics.prototype = $extend(Phaser.Graphics.prototype,{
	__class__: whiplash_phaser_Graphics
});
var whiplash_phaser_GraphicsNode = function() { };
whiplash_phaser_GraphicsNode.__name__ = ["whiplash","phaser","GraphicsNode"];
whiplash_phaser_GraphicsNode._getComponents = function() {
	if(whiplash_phaser_GraphicsNode._components == null) {
		whiplash_phaser_GraphicsNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_GraphicsNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_GraphicsNode._components;
		var k1 = whiplash_phaser_Graphics;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"graphics");
		} else {
			_this5.h[name1] = "graphics";
		}
	}
	return whiplash_phaser_GraphicsNode._components;
};
whiplash_phaser_GraphicsNode.__super__ = ash_core_Node;
whiplash_phaser_GraphicsNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_GraphicsNode
});
var whiplash_phaser_GraphicsSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_GraphicsNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_GraphicsSystem.__name__ = ["whiplash","phaser","GraphicsSystem"];
whiplash_phaser_GraphicsSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_GraphicsSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var graphics = node.graphics;
		graphics.position.x = position.x;
		graphics.position.y = position.y;
		graphics.scale.x = scale.x;
		graphics.scale.y = scale.y;
		graphics.angle = transform.rotation;
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var graphics = node.graphics;
		graphics.position.x = position.x;
		graphics.position.y = position.y;
		graphics.scale.x = scale.x;
		graphics.scale.y = scale.y;
		graphics.angle = transform.rotation;
		node.graphics.revive();
	}
	,onNodeRemoved: function(node) {
		node.graphics.kill();
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var graphics = node.graphics;
		graphics.position.x = position.x;
		graphics.position.y = position.y;
		graphics.scale.x = scale.x;
		graphics.scale.y = scale.y;
		graphics.angle = transform.rotation;
	}
	,__class__: whiplash_phaser_GraphicsSystem
});
var whiplash_phaser_Group = function(parent) {
	Phaser.Group.call(this,whiplash_Lib.phaserGame,parent);
};
whiplash_phaser_Group.__name__ = ["whiplash","phaser","Group"];
whiplash_phaser_Group.__super__ = Phaser.Group;
whiplash_phaser_Group.prototype = $extend(Phaser.Group.prototype,{
	__class__: whiplash_phaser_Group
});
var whiplash_phaser_GroupNode = function() { };
whiplash_phaser_GroupNode.__name__ = ["whiplash","phaser","GroupNode"];
whiplash_phaser_GroupNode._getComponents = function() {
	if(whiplash_phaser_GroupNode._components == null) {
		whiplash_phaser_GroupNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_GroupNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_GroupNode._components;
		var k1 = whiplash_phaser_Group;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"group");
		} else {
			_this5.h[name1] = "group";
		}
	}
	return whiplash_phaser_GroupNode._components;
};
whiplash_phaser_GroupNode.__super__ = ash_core_Node;
whiplash_phaser_GroupNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_GroupNode
});
var whiplash_phaser_GroupSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_GroupNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_GroupSystem.__name__ = ["whiplash","phaser","GroupSystem"];
whiplash_phaser_GroupSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_GroupSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var group = node.group;
		group.position.x = position.x;
		group.position.y = position.y;
		group.scale.x = scale.x;
		group.scale.y = scale.y;
		group.angle = transform.rotation;
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var group = node.group;
		group.position.x = position.x;
		group.position.y = position.y;
		group.scale.x = scale.x;
		group.scale.y = scale.y;
		group.angle = transform.rotation;
	}
	,onNodeRemoved: function(node) {
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var group = node.group;
		group.position.x = position.x;
		group.position.y = position.y;
		group.scale.x = scale.x;
		group.scale.y = scale.y;
		group.angle = transform.rotation;
	}
	,__class__: whiplash_phaser_GroupSystem
});
var whiplash_phaser_Sprite = function(key,frame) {
	Phaser.Sprite.call(this,whiplash_Lib.phaserGame,0,0,key,frame);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_Sprite.__name__ = ["whiplash","phaser","Sprite"];
whiplash_phaser_Sprite.__super__ = Phaser.Sprite;
whiplash_phaser_Sprite.prototype = $extend(Phaser.Sprite.prototype,{
	__class__: whiplash_phaser_Sprite
});
var whiplash_phaser_SpriteNode = function() { };
whiplash_phaser_SpriteNode.__name__ = ["whiplash","phaser","SpriteNode"];
whiplash_phaser_SpriteNode._getComponents = function() {
	if(whiplash_phaser_SpriteNode._components == null) {
		whiplash_phaser_SpriteNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_SpriteNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_SpriteNode._components;
		var k1 = whiplash_phaser_Sprite;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
	}
	return whiplash_phaser_SpriteNode._components;
};
whiplash_phaser_SpriteNode.__super__ = ash_core_Node;
whiplash_phaser_SpriteNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_SpriteNode
});
var whiplash_phaser_SpriteSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_SpriteNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_SpriteSystem.__name__ = ["whiplash","phaser","SpriteSystem"];
whiplash_phaser_SpriteSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_SpriteSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		if(sprite.body) {
			if(!sprite.body.immovable) {
				position.x = sprite.position.x;
				position.y = sprite.position.y;
				transform.rotation = sprite.angle;
			} else {
				sprite.body.position.x = position.x;
				sprite.body.position.y = position.y;
				sprite.body.angle = transform.rotation;
				sprite.position.x = position.x;
				sprite.position.y = position.y;
				sprite.angle = transform.rotation;
			}
			sprite.scale.x = scale.x;
			sprite.scale.y = scale.y;
		} else {
			sprite.position.x = position.x;
			sprite.position.y = position.y;
			sprite.scale.x = scale.x;
			sprite.scale.y = scale.y;
			sprite.angle = transform.rotation;
		}
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		if(sprite.body) {
			if(!sprite.body.immovable) {
				position.x = sprite.position.x;
				position.y = sprite.position.y;
				transform.rotation = sprite.angle;
			} else {
				sprite.body.position.x = position.x;
				sprite.body.position.y = position.y;
				sprite.body.angle = transform.rotation;
				sprite.position.x = position.x;
				sprite.position.y = position.y;
				sprite.angle = transform.rotation;
			}
			sprite.scale.x = scale.x;
			sprite.scale.y = scale.y;
		} else {
			sprite.position.x = position.x;
			sprite.position.y = position.y;
			sprite.scale.x = scale.x;
			sprite.scale.y = scale.y;
			sprite.angle = transform.rotation;
		}
		node.sprite.revive();
	}
	,onNodeRemoved: function(node) {
		node.sprite.kill();
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		if(sprite.body) {
			if(!sprite.body.immovable) {
				position.x = sprite.position.x;
				position.y = sprite.position.y;
				transform.rotation = sprite.angle;
			} else {
				sprite.body.position.x = position.x;
				sprite.body.position.y = position.y;
				sprite.body.angle = transform.rotation;
				sprite.position.x = position.x;
				sprite.position.y = position.y;
				sprite.angle = transform.rotation;
			}
			sprite.scale.x = scale.x;
			sprite.scale.y = scale.y;
		} else {
			sprite.position.x = position.x;
			sprite.position.y = position.y;
			sprite.scale.x = scale.x;
			sprite.scale.y = scale.y;
			sprite.angle = transform.rotation;
		}
	}
	,__class__: whiplash_phaser_SpriteSystem
});
var whiplash_phaser_Text = function(text,style) {
	if(style == null) {
		style = { align : "center", boundsAlignH : "left", boundsAlignV : "top"};
	}
	Phaser.Text.call(this,whiplash_Lib.phaserGame,0,0,text,style);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_Text.__name__ = ["whiplash","phaser","Text"];
whiplash_phaser_Text.__super__ = Phaser.Text;
whiplash_phaser_Text.prototype = $extend(Phaser.Text.prototype,{
	__class__: whiplash_phaser_Text
});
var whiplash_phaser_TextNode = function() { };
whiplash_phaser_TextNode.__name__ = ["whiplash","phaser","TextNode"];
whiplash_phaser_TextNode._getComponents = function() {
	if(whiplash_phaser_TextNode._components == null) {
		whiplash_phaser_TextNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_TextNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_TextNode._components;
		var k1 = whiplash_phaser_Text;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
	}
	return whiplash_phaser_TextNode._components;
};
whiplash_phaser_TextNode.__super__ = ash_core_Node;
whiplash_phaser_TextNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_TextNode
});
var whiplash_phaser_TextSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_TextNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_TextSystem.__name__ = ["whiplash","phaser","TextSystem"];
whiplash_phaser_TextSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_TextSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
		node.sprite.revive();
	}
	,onNodeRemoved: function(node) {
		node.sprite.kill();
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
	}
	,__class__: whiplash_phaser_TextSystem
});
var whiplash_phaser_TileSprite = function(w,h,key) {
	if(h == null) {
		h = 0;
	}
	if(w == null) {
		w = 0;
	}
	Phaser.TileSprite.call(this,whiplash_Lib.phaserGame,0,0,w,h,key);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_TileSprite.__name__ = ["whiplash","phaser","TileSprite"];
whiplash_phaser_TileSprite.__super__ = Phaser.TileSprite;
whiplash_phaser_TileSprite.prototype = $extend(Phaser.TileSprite.prototype,{
	__class__: whiplash_phaser_TileSprite
});
var whiplash_phaser_TileSpriteNode = function() { };
whiplash_phaser_TileSpriteNode.__name__ = ["whiplash","phaser","TileSpriteNode"];
whiplash_phaser_TileSpriteNode._getComponents = function() {
	if(whiplash_phaser_TileSpriteNode._components == null) {
		whiplash_phaser_TileSpriteNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_TileSpriteNode._components;
		var k = whiplash_phaser_Transform;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"transform");
		} else {
			_this2.h[name] = "transform";
		}
		var _this3 = whiplash_phaser_TileSpriteNode._components;
		var k1 = whiplash_phaser_TileSprite;
		var name1 = Type.getClassName(k1);
		var _this4 = _this3.keyMap;
		if(__map_reserved[name1] != null) {
			_this4.setReserved(name1,k1);
		} else {
			_this4.h[name1] = k1;
		}
		var _this5 = _this3.valueMap;
		if(__map_reserved[name1] != null) {
			_this5.setReserved(name1,"sprite");
		} else {
			_this5.h[name1] = "sprite";
		}
	}
	return whiplash_phaser_TileSpriteNode._components;
};
whiplash_phaser_TileSpriteNode.__super__ = ash_core_Node;
whiplash_phaser_TileSpriteNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_TileSpriteNode
});
var whiplash_phaser_TileSpriteSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_TileSpriteNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_TileSpriteSystem.__name__ = ["whiplash","phaser","TileSpriteSystem"];
whiplash_phaser_TileSpriteSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_TileSpriteSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
	}
	,onNodeAdded: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
		node.sprite.revive();
	}
	,onNodeRemoved: function(node) {
		node.sprite.kill();
	}
	,apply: function(node) {
		var transform = node.transform;
		var position = transform.position;
		var scale = transform.scale;
		var sprite = node.sprite;
		sprite.position.x = position.x;
		sprite.position.y = position.y;
		sprite.scale.x = scale.x;
		sprite.scale.y = scale.y;
		sprite.angle = transform.rotation;
	}
	,__class__: whiplash_phaser_TileSpriteSystem
});
var whiplash_phaser_TilemapLayer = function(tilemap,index,w,h) {
	Phaser.TilemapLayer.call(this,whiplash_Lib.phaserGame,tilemap,index,w,h);
	whiplash_Lib.phaserGame.add.existing(this);
	this.kill();
};
whiplash_phaser_TilemapLayer.__name__ = ["whiplash","phaser","TilemapLayer"];
whiplash_phaser_TilemapLayer.__super__ = Phaser.TilemapLayer;
whiplash_phaser_TilemapLayer.prototype = $extend(Phaser.TilemapLayer.prototype,{
	__class__: whiplash_phaser_TilemapLayer
});
var whiplash_phaser_TilemapLayerNode = function() { };
whiplash_phaser_TilemapLayerNode.__name__ = ["whiplash","phaser","TilemapLayerNode"];
whiplash_phaser_TilemapLayerNode._getComponents = function() {
	if(whiplash_phaser_TilemapLayerNode._components == null) {
		whiplash_phaser_TilemapLayerNode._components = new ash_ClassMap();
		var _this = whiplash_phaser_TilemapLayerNode._components;
		var k = whiplash_phaser_TilemapLayer;
		var name = Type.getClassName(k);
		var _this1 = _this.keyMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,k);
		} else {
			_this1.h[name] = k;
		}
		var _this2 = _this.valueMap;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,"tilemapLayer");
		} else {
			_this2.h[name] = "tilemapLayer";
		}
	}
	return whiplash_phaser_TilemapLayerNode._components;
};
whiplash_phaser_TilemapLayerNode.__super__ = ash_core_Node;
whiplash_phaser_TilemapLayerNode.prototype = $extend(ash_core_Node.prototype,{
	__class__: whiplash_phaser_TilemapLayerNode
});
var whiplash_phaser_TilemapLayerSystem = function(game) {
	ash_tools_ListIteratingSystem.call(this,whiplash_phaser_TilemapLayerNode,$bind(this,this.updateNode),$bind(this,this.onNodeAdded),$bind(this,this.onNodeRemoved));
	this.game = game;
};
whiplash_phaser_TilemapLayerSystem.__name__ = ["whiplash","phaser","TilemapLayerSystem"];
whiplash_phaser_TilemapLayerSystem.__super__ = ash_tools_ListIteratingSystem;
whiplash_phaser_TilemapLayerSystem.prototype = $extend(ash_tools_ListIteratingSystem.prototype,{
	updateNode: function(node,dt) {
	}
	,onNodeAdded: function(node) {
		node.tilemapLayer.revive();
	}
	,onNodeRemoved: function(node) {
		node.tilemapLayer.kill();
	}
	,__class__: whiplash_phaser_TilemapLayerSystem
});
var whiplash_phaser_Transform = function(x,y,r,sx,sy) {
	if(sy == null) {
		sy = 1.0;
	}
	if(sx == null) {
		sx = 1.0;
	}
	if(r == null) {
		r = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	var this1 = new Phaser.Point(0.0,0.0);
	this.scale = this1;
	var this11 = new Phaser.Point(0.0,0.0);
	this.position = this11;
	this.position.x = x;
	this.position.y = y;
	this.rotation = r;
	this.scale.x = sx;
	this.scale.y = sy;
};
whiplash_phaser_Transform.__name__ = ["whiplash","phaser","Transform"];
whiplash_phaser_Transform.prototype = {
	__class__: whiplash_phaser_Transform
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
ash_core_Entity.nameCount = 0;
game_Config.width = 320;
game_Config.height = 240;
game_Config.rows = 15;
game_Config.cols = 20;
game_Config.tileSize = 16;
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_uipages_Lib.instances = new haxe_ds_ObjectMap();
whiplash_AudioManager.soundIsEnabled = true;
whiplash_AudioManager.musicIsEnabled = true;
whiplash_AudioManager.sounds = new haxe_ds_StringMap();
whiplash_DataManager.textureFiles = [];
whiplash_DataManager.soundFiles = [];
whiplash_DataManager.tilemapFiles = [];
whiplash_DataManager.atlasFiles = [];
whiplash_Input.keys = new haxe_ds_StringMap();
whiplash_Input.mouseButtons = new haxe_ds_IntMap();
whiplash_Input.mouseCoordinates = (function($this) {
	var $r;
	var this1 = new Phaser.Point(0,0);
	$r = this1;
	return $r;
}(this));
whiplash_Input.mouseWheelDelta = 0;
whiplash_Input.justPressedKeys = new haxe_ds_StringMap();
whiplash_Input.gamepadStates = [];
whiplash_Input.nullAxes = [0,0,0,0];
whiplash_Input.previousGamepadButtons = [[],[],[],[]];
whiplash_Input.previousGamepadAxes = [whiplash_Input.nullAxes,whiplash_Input.nullAxes,whiplash_Input.nullAxes,whiplash_Input.nullAxes];
whiplash_Input.xyAxes = (function($this) {
	var $r;
	var this1 = new Phaser.Point(0,0);
	$r = this1;
	return $r;
}(this));
whiplash_Input.zwAxes = (function($this) {
	var $r;
	var this1 = new Phaser.Point(0,0);
	$r = this1;
	return $r;
}(this));
game_Game.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
